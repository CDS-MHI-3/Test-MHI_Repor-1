[pytest]
markers =
    xray: Xray
    flaky: Tests that are inconsistent with pass/fails
    asana: Asana based tests
    auth0: Auth0 test cases
    debug: Debug specific tests - used sparingly
    databricks: Databricks based tests
    box: Box based tests
    core: Core endpoint based tests
    databricks: Databricks based tests
    fastly: Fastly based tests
    github: GitHub based tests
    gsuite: Gsuite based tests
    ccil: Cross Cloud Issues List based tests
    duo: Duo based tests
    sfdc: Salesforce based tests
    sfmc: Salesforce Marketing Cloud based tests
    o365: Microsoft 365 based tests
    okta: Okta based tests
    sapsf: SAP Success Factors based tests
    slack: Slack based tests
    sendgrid: SendGrid based tests
    smartsheet: Smartsheet based tests
    snow: Service Now based tests
    workday: Workday based tests
    gitlab: Gitlab based tests
    zoom: Zoom based tests
    prom: Tests relevant to Prometheus delivery team
    crowdstrike: CrowdStrike based tests
    wiz: Wiz based tests
    netsuite: NetSuite based tests
    veevavault: Veeva Vault based tests
    tableau: Tableau based tests
    jira: Jira based tests
    jumpcloud: Jumpcloud based tests
    imanage: IManage based tests
    integrations: Integration based tests
    ping: Ping based tests
    mongo: Mongo based tests
    hubspot: Hubspot based tests
    zoom: Zoom based tests
    confluence: Confluence based tests
    comprehensive_policy_setup: Steps used to create a policy and add all the rules to it
    data_security_policy_setup: Tests that runs CRUD operations on data security policies and setup static policies
    functional_data_policy_setup: Tests that runs CRUD operations on functional data policies and setup static policies
    tpa: Third Party Applications based tests
    dev_platform: AppOmni Developer Platform tests
    email_delivery: Tests that verify email has been delivered to testmail.app
    monday: Monday based tests
    notion: notion
    lucid: Lucid based tests
    webex: Webex based tests
    snowflake: Snowflake based tests
    zendesk: Zendesk based test
    stripe: Stripe based test
    onelogin: Onelogin based test
    miro: Miro based test
    jamf: Jamf based test
    jiraworkflow: Jira workflow based test
    docusign: Docusign based test
    public: Public API tests
    request: Methods that request reports
    download: Methods that download reports
    contents: Methods that read report contents
    reports_compliance: Compliance based tests for Reports
    reports_top_five: Top Five tests for Reports, typically per Service Type
    reports_request: Setup for requesting reports
    reports_download: Setup for downloading report
    stackvalidation: Tests for verifying core functionality in a new tenant
    create_sink: Tests for creating a threat detection event sink
    e2e: End to end tests
    smoke: Smoke tests
    service_type: Pass the service type to the fixture as a parameter
    conditions: Conditions to filter the required MS
    multiple_ms_policy_setup: Testing rule eval with Policy scanning against multiple Monitored Service
    release_day_manual_run: Tests that need to be run manually on release day
    tenant: Tenant to execute tests against
# sets the junit family to xunit1 in order to avoid the junit_family deprecation warning
junit_family=xunit1
# sets the traceback printing to short and creates "test_results.xml" after test execution
addopts = --tb=short --junitxml=./logs/test_results.xml
# sets the CLI log level to DEBUG for more verbosity
log_cli=true
log_cli_level=ERROR
log_file_level = INFO
log_file_format = %(asctime)s %(levelname)s %(filename)s::%(lineno)d -- %(funcName)s %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S
log_file=logs/requests.log
allow_duplicate_ids = True
